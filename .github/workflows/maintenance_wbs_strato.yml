name: ‚õ≥ Deploy & Maintenance Strato

on:
  workflow_call:
    inputs:
      php_version:
        required: true
        type: string
        default: "8.1"
      node_version:
        required: true
        type: string
        default: "20"
      wordpress_path:
        required: true
        type: string
    secrets:
      ssh_root_live:
        required: true
      ssh_root_staging:
        required: true
      env_live:
        required: true
      env_staging:
        required: true
      theme_dir:
        required: true
      ssh_host:
        required: true
      ssh_user:
        required: true
      ssh_private_key:
        required: true


jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üöÄ Checkout code
        uses: actions/checkout@v4

      - name: ‚öæ Set environment variables based on branch
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "SSH_ROOT=${{ secrets.ssh_root_live }}" >> $GITHUB_ENV
            printf "ENVIRONMENT<<EOF\n%s\nEOF\n" "${{ secrets.env_live }}" >> $GITHUB_ENV
          elif [ "${{ github.ref_name }}" = "staging" ]; then
            echo "SSH_ROOT=${{ secrets.ssh_root_staging }}" >> $GITHUB_ENV
            printf "ENVIRONMENT<<EOF\n%s\nEOF\n" "${{ secrets.env_staging }}" >> $GITHUB_ENV
          else
            echo "This branch is not configured for deployment."
            exit 1
          fi

      - name: üî¨ Validate Required Secrets
        run: |
          if [ -z "${{ secrets.theme_dir }}" ]; then
            echo "Missing THEME_DIR secret"
            exit 1
          fi
          if [ -z "${{ secrets.ssh_host }}" ]; then
            echo "Missing SSH_HOST secret"
            exit 1
          fi
          if [ -z "${{ secrets.ssh_user }}" ]; then
            echo "Missing SSH_USER secret"
            exit 1
          fi
          if [ -z "${{ env.SSH_ROOT }}" ]; then
            echo "Missing SSH_ROOT secret"
            exit 1
          fi
          if [ -z "${{ secrets.ssh_private_key }}" ]; then
            echo "Missing SSH_PRIVATE_KEY secret"
            exit 1
          fi
          if [ -z "${{ env.ENVIRONMENT }}" ]; then
            echo "Missing ENVIRONMENT secret"
            exit 1
          fi

      - name: üîç Verify theme directory
        run: |
          if [ ! -d "${{ secrets.theme_dir }}" ]; then
            echo "Directory ${{ secrets.theme_dir }} does not exist."
            exit 1
          fi

      - name: üåç Verify .rsync-include file
        run: |
          if [ ! -f ".rsync-include" ]; then
            echo ".rsync-include file does not exist."
            exit 1
          fi

      - name: üìù Create Production environment
        run: |
          printf "%s" "${{ env.ENVIRONMENT }}" > .env

#      - name: üêò Set up PHP
#        uses: shivammathur/setup-php@v2
#        with:
#          php-version: ${{ inputs.php_version }}

#      - name: üé≤ Install composer dependency
#        run: composer install
#
#      - name: ‚è≥ Install theme composer dependency
#        run: composer install
#        working-directory: ${{ secrets.theme_dir }}
#
#      - name: üé£ Install Node.js
#        uses: actions/setup-node@v2
#        with:
#          node-version: ${{ inputs.node_version }}
#
#      - name: üîß Install npm dependencies
#        run: yarn install
#        working-directory: ${{ secrets.theme_dir }}
#
#      - name: üèÑ Build theme
#        run: yarn run build
#        working-directory: ${{ secrets.theme_dir }}
#
#      - name: üî≠ Install SSH and rsync
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y ssh rsync

      - name: üëÄ Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ssh_private_key }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.ssh_host }} >> ~/.ssh/known_hosts

#      - name: üíé Checking rsync execution before upload
#        run: |
#          rsync_output=$(rsync -avz -n --no-times --delete --include-from='.rsync-include' --exclude='*' ./ ${{ secrets.ssh_user }}@${{ secrets.ssh_host }}:${{ env.SSH_ROOT }} 2>&1)
#          rsync_exit_code=$?
#
#          echo "$rsync_output"
#
#          if [ $rsync_exit_code -ne 0 ]; then
#          echo "Error: Rsync encountered an error during the dry run."
#          exit 1
#          fi

#      - name: üåä Upload files with rsync
#        run: |
#          rsync -avz --no-times --delete --include-from='.rsync-include' --exclude='*' ./ ${{ secrets.ssh_user }}@${{ secrets.ssh_host }}:${{ env.SSH_ROOT }}

      - name: ‚öôÔ∏è Activate/Deactivate Plugins
        continue-on-error: true
        run: |
          ssh -T -i ~/.ssh/id_rsa "${{ secrets.ssh_user }}@${{ secrets.ssh_host }}" << EOF
          set -x
          cd ${{ env.SSH_ROOT }}
      
          if [ -f "project-state.json" ]; then
            echo "project-state.json found, processing..."
      
            # Extract plugin names and statuses with grep and sed
            PLUGIN_ENTRIES=\$(grep -oP '"name":.*?[^\\]",|"status":.*?[^\\]"' project-state.json | sed -e 's/"name"://g' -e 's/"status"://g' -e 's/[", ]//g')
      
            PLUGIN_ARRAY=()
            while read -r line; do
              PLUGIN_ARRAY+=("\$line")
            done <<< "\$PLUGIN_ENTRIES"
          
            # Loop through the array and process plugins
            for ((i=0; i<\${#PLUGIN_ARRAY[@]}; i+=2)); do
              PLUGIN_NAME="\${PLUGIN_ARRAY[i]}"
              PLUGIN_STATUS="\${PLUGIN_ARRAY[i+1]}"
          
              if [ -n "\$PLUGIN_NAME" ] && [ -n "\$PLUGIN_STATUS" ]; then
                if [ "\$PLUGIN_STATUS" = "active" ]; then
                  echo "Activating \$PLUGIN_NAME"
                  ddev wp plugin activate "\$PLUGIN_NAME" || echo "Failed to activate \$PLUGIN_NAME"
                elif [ "\$PLUGIN_STATUS" = "inactive" ]; then
                  echo "Deactivating \$PLUGIN_NAME"
                  ddev wp plugin deactivate "\$PLUGIN_NAME" || echo "Failed to deactivate \$PLUGIN_NAME"
                fi
              fi
            done
          else
            echo "project-state.json file not found."
            exit 1
          fi
          EOF
          echo "SSH Command finished"
#      - name: üé® Activate Theme
#        continue-on-error: true
#        run: |
#          ssh -i ~/.ssh/id_rsa ${{ secrets.ssh_user }}@${{ secrets.ssh_host }} << EOF
#          cd ${{ env.SSH_ROOT }}
#          if [ -f project-state.json ]; then
#            THEME_NAME=$(grep -oP '"active-theme"\s*:\s*"\K[^"]+' project-state.json || echo "")
#            if [ -n "$THEME_NAME" ]; then
#              wp theme activate $THEME_NAME --path=${{ env.SSH_ROOT }}/${{ inputs.wordpress_path }}
#            else
#              echo "No active theme specified."
#            fi
#          else
#            echo "project-state.json not found."
#          fi
#          EOF

      - name: üç∫ Done
        run: |
          echo "Done"
